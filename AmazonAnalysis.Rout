
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(ggplot2)
> library(vroom)

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec(), readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(embed)
> 
> #Read in Data
> train <- vroom('./train.csv/train.csv') %>%
+   mutate(ACTION = as.factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom('./test.csv/test.csv')
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #Create Two plots:::
> #Include Action Variable
> #DataExplorer::plot_intro(train)
> #DataExplorer::plot_correlation(train) 
> #DataExplorer::plot_bar(train) 
> #DataExplorer::plot_histogram(train) 
> 
> 
> 
> #Recipe that does dummy variable encoding, combines factors that occur less than 1% into an "Other Category"
> my_recipe <- recipe(ACTION ~., data=train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% 
+   step_lencode_mixed(all_nominal_predictors(), outcome= vars(ACTION))
> 
> 
> # apply the recipe to your data
> prep <- prep(my_recipe)>> bake(prep, new_data = train)
# A tibble: 32,769 × 10
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    -2.72  -5.33         -2.93         -3.08         -3.18      -3.40
 2    -2.72  -2.76         -2.93         -3.43         -2.19      -3.27
 3    -2.72  -2.76         -2.46         -2.47         -2.50      -2.10
 4    -2.72  -5.39         -2.93         -3.43         -4.19      -2.45
 5    -2.72  -2.76         -2.62         -2.07         -1.36      -2.05
 6    -2.72  -2.76         -2.67         -2.67         -2.13      -2.53
 7    -3.03  -2.76         -2.93         -3.43         -2.41      -2.60
 8    -2.72  -2.76         -2.93         -2.56         -3.26      -2.75
 9    -2.72  -2.76         -2.93         -3.28         -3.10      -2.38
10    -2.72  -2.76         -1.51         -1.53         -2.72      -2.10
# ℹ 32,759 more rows
# ℹ 4 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>, ACTION <fct>
> bake(prep, new_data= test)
# A tibble: 58,921 × 9
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    -2.72  -2.76         -1.51         -1.53         -2.72      -2.10
 2    -2.72  -2.76         -2.93         -3.04         -2.85      -4.13
 3    -2.72  -5.30         -2.93         -3.08         -3.98      -2.85
 4    -2.72  -2.00         -2.93         -3.10         -3.81      -2.40
 5    -2.81  -2.76         -2.93         -3.43         -3.75      -4.46
 6    -2.41  -5.31         -2.93         -2.95         -4.03      -4.14
 7    -3.90  -2.76         -2.93         -3.43         -2.41      -3.48
 8    -5.05  -2.76         -2.93         -3.08         -3.24      -4.11
 9    -1.40  -2.76         -3.21         -2.77         -1.66      -2.39
10    -2.72  -2.76         -2.93         -3.37         -4.22      -2.45
# ℹ 58,911 more rows
# ℹ 3 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>
> 
> 
> 
> 
> #Logistic Regression
> 
> my_mod <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> amazon_workflow <- workflow() %>%
+ add_recipe(my_recipe) %>%
+ add_model(my_mod) %>%
+ fit(data = train) # Fit the workflow>> 
> amazon_predictions <- predict(amazon_workflow,
+                               new_data=test,
+                               type="prob")
> 
> #amazon_predictions <- amazon_predictions %>%
> #  ifelse(.pred_1>=0.7, 1, 0)
> 
> 
> 
> amazon_predictions <- amazon_predictions %>% 
+   bind_cols(., test) %>%
+   select(id, .pred_1) %>% #Just keep datetime and predictions
+   rename(action =.pred_1) 
>   
> 
> 
> vroom_write(x=amazon_predictions, file="./amazon_logistic.csv", delim=",")
> 
> 
> 
> 
> #Penalized Logistic Regression
> 
> 
> 
> my_mod_penalized <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> 
> amazon_workflow_penalized <- workflow() %>%
+ add_recipe(my_recipe) %>%
+ add_model(my_mod_penalized)
> 
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> 
> ## Split data for CV
> folds <- vfold_cv(train, v = 5, repeats=1)
> 
> 
> CV_results_pen <- amazon_workflow_penalized %>%
+ tune_grid(resamples=folds,
+           grid=tuning_grid,
+           metrics=metric_set(roc_auc))>> 
> ## Find Best Tuning Parameters
> 
> bestTune <- CV_results_pen %>%
+ select_best("roc_auc")
> 
> 
> ## Finalize the Workflow & fit it
> 
> final_wf <-
+ amazon_workflow_penalized %>%
+ finalize_workflow(bestTune) %>%
+ fit(data=train)>> 
> 
> penalized_predictions <- final_wf %>%
+   predict(test, type = "prob")
> 
> penalized_predictions <- penalized_predictions %>%
+   bind_cols(., test) %>%
+   select(id, .pred_1) %>%
+   rename(action = .pred_1)
> 
> vroom_write(x=penalized_predictions, file="penalized_predictions.csv", delim=",")
> 
> bestTune
# A tibble: 1 × 3
  penalty mixture .config              
    <dbl>   <dbl> <chr>                
1 0.00316     0.5 Preprocessor1_Model14
>   
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
343.479   2.216 167.568 
